package main

import (
	"log"
	"net"
	"testing"
)

var publish = []byte{0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x20, 0x73, 0x69, 0x70, 0x3a, 0x38, 0x37, 0x2e, 0x31, 0x30, 0x33, 0x2e, 0x31, 0x32, 0x30, 0x2e, 0x32, 0x35, 0x33, 0x3a, 0x39, 0x30, 0x37, 0x30, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0xd, 0xa, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x31, 0x30, 0x2e, 0x30, 0x2e, 0x33, 0x2e, 0x31, 0x33, 0x3a, 0x33, 0x30, 0x37, 0x32, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x2d, 0x32, 0x61, 0x74, 0x63, 0x61, 0x67, 0x77, 0x62, 0x6c, 0x7a, 0x76, 0x32, 0x3b, 0x72, 0x70, 0x6f, 0x72, 0x74, 0xd, 0xa, 0x46, 0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x35, 0x30, 0x30, 0x34, 0x40, 0x31, 0x30, 0x2e, 0x30, 0x2e, 0x33, 0x2e, 0x32, 0x35, 0x32, 0x3e, 0x3b, 0x74, 0x61, 0x67, 0x3d, 0x32, 0x79, 0x67, 0x74, 0x70, 0x79, 0x37, 0x62, 0x67, 0x6b, 0xd, 0xa, 0x54, 0x6f, 0x3a, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x38, 0x37, 0x2e, 0x31, 0x30, 0x33, 0x2e, 0x31, 0x32, 0x30, 0x2e, 0x32, 0x35, 0x33, 0x3a, 0x39, 0x30, 0x37, 0x30, 0x3e, 0xd, 0xa, 0x43, 0x61, 0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x3a, 0x20, 0x38, 0x39, 0x35, 0x39, 0x36, 0x32, 0x35, 0x37, 0x36, 0x33, 0x35, 0x64, 0x2d, 0x69, 0x70, 0x31, 0x38, 0x71, 0x38, 0x6e, 0x30, 0x6c, 0x70, 0x31, 0x62, 0xd, 0xa, 0x43, 0x53, 0x65, 0x71, 0x3a, 0x20, 0x32, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0xd, 0xa, 0x4d, 0x61, 0x78, 0x2d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x3a, 0x20, 0x37, 0x30, 0xd, 0xa, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x3a, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x35, 0x30, 0x30, 0x34, 0x40, 0x31, 0x30, 0x2e, 0x30, 0x2e, 0x33, 0x2e, 0x31, 0x33, 0x3a, 0x33, 0x30, 0x37, 0x32, 0x3b, 0x6c, 0x69, 0x6e, 0x65, 0x3d, 0x73, 0x77, 0x76, 0x38, 0x69, 0x6d, 0x33, 0x66, 0x3e, 0x3b, 0x72, 0x65, 0x67, 0x2d, 0x69, 0x64, 0x3d, 0x31, 0xd, 0xa, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x73, 0x6e, 0x6f, 0x6d, 0x38, 0x32, 0x31, 0x2f, 0x38, 0x37, 0x33, 0x5f, 0x31, 0x39, 0x5f, 0x32, 0x30, 0x31, 0x33, 0x30, 0x33, 0x32, 0x31, 0xd, 0xa, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x76, 0x71, 0x2d, 0x72, 0x74, 0x63, 0x70, 0x78, 0x72, 0xd, 0xa, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x64, 0x70, 0x2c, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x73, 0x69, 0x70, 0x66, 0x72, 0x61, 0x67, 0xd, 0xa, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x71, 0x2d, 0x72, 0x74, 0x63, 0x70, 0x78, 0x72, 0xd, 0xa, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x38, 0x30, 0x34, 0xd, 0xa, 0xd, 0xa, 0x56, 0x51, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x20, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0xd, 0xa, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x3a, 0x38, 0x32, 0x35, 0x39, 0x36, 0x32, 0x35, 0x37, 0x30, 0x33, 0x30, 0x39, 0x2d, 0x38, 0x64, 0x73, 0x35, 0x73, 0x6c, 0x33, 0x6d, 0x63, 0x61, 0x39, 0x39, 0xd, 0xa, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x3a, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x35, 0x30, 0x30, 0x34, 0x40, 0x31, 0x30, 0x2e, 0x30, 0x2e, 0x33, 0x2e, 0x32, 0x35, 0x32, 0x3e, 0xd, 0xa, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x44, 0x3a, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x35, 0x32, 0x30, 0x40, 0x31, 0x30, 0x2e, 0x30, 0x2e, 0x33, 0x2e, 0x32, 0x35, 0x32, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x3d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x3e, 0xd, 0xa, 0x4f, 0x72, 0x69, 0x67, 0x49, 0x44, 0x3a, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x35, 0x30, 0x30, 0x34, 0x40, 0x31, 0x30, 0x2e, 0x30, 0x2e, 0x33, 0x2e, 0x32, 0x35, 0x32, 0x3e, 0xd, 0xa, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x3a, 0x49, 0x50, 0x3d, 0x31, 0x30, 0x2e, 0x30, 0x2e, 0x33, 0x2e, 0x31, 0x33, 0x20, 0x50, 0x4f, 0x52, 0x54, 0x3d, 0x35, 0x37, 0x34, 0x36, 0x30, 0x20, 0x53, 0x53, 0x52, 0x43, 0x3d, 0x30, 0x78, 0x30, 0x31, 0x34, 0x45, 0x41, 0x32, 0x36, 0x31, 0xd, 0xa, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x41, 0x43, 0x3a, 0x30, 0x30, 0x30, 0x34, 0x31, 0x33, 0x35, 0x33, 0x31, 0x30, 0x44, 0x42, 0xd, 0xa, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x3a, 0x49, 0x50, 0x3d, 0x31, 0x30, 0x2e, 0x30, 0x2e, 0x33, 0x2e, 0x32, 0x35, 0x32, 0x20, 0x50, 0x4f, 0x52, 0x54, 0x3d, 0x31, 0x30, 0x30, 0x33, 0x34, 0x20, 0x53, 0x53, 0x52, 0x43, 0x3d, 0x30, 0x78, 0x31, 0x46, 0x36, 0x33, 0x34, 0x45, 0x41, 0x32, 0xd, 0xa, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x44, 0x3a, 0x38, 0x32, 0x35, 0x39, 0x36, 0x32, 0x35, 0x37, 0x30, 0x33, 0x30, 0x39, 0x2d, 0x38, 0x64, 0x73, 0x35, 0x73, 0x6c, 0x33, 0x6d, 0x63, 0x61, 0x39, 0x39, 0x3b, 0x74, 0x6f, 0x2d, 0x74, 0x61, 0x67, 0x3d, 0x67, 0x71, 0x6a, 0x38, 0x37, 0x74, 0x30, 0x73, 0x74, 0x46, 0x2d, 0x4d, 0x38, 0x67, 0x2e, 0x6b, 0x50, 0x52, 0x45, 0x4b, 0x4c, 0x74, 0x68, 0x61, 0x47, 0x6c, 0x30, 0x33, 0x30, 0x6d, 0x7a, 0x65, 0x3b, 0x66, 0x72, 0x6f, 0x6d, 0x2d, 0x74, 0x61, 0x67, 0x3d, 0x32, 0x79, 0x67, 0x74, 0x70, 0x79, 0x37, 0x62, 0x67, 0x6b, 0xd, 0xa, 0x78, 0x2d, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x73, 0x6e, 0x6f, 0x6d, 0x38, 0x32, 0x31, 0x2f, 0x38, 0x37, 0x33, 0x5f, 0x31, 0x39, 0x5f, 0x32, 0x30, 0x31, 0x33, 0x30, 0x33, 0x32, 0x31, 0xd, 0xa, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x3a, 0xd, 0xa, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x3a, 0x53, 0x54, 0x41, 0x52, 0x54, 0x3d, 0x32, 0x30, 0x31, 0x36, 0x2d, 0x30, 0x36, 0x2d, 0x31, 0x36, 0x54, 0x30, 0x37, 0x3a, 0x34, 0x37, 0x3a, 0x31, 0x34, 0x5a, 0x20, 0x53, 0x54, 0x4f, 0x50, 0x3d, 0x32, 0x30, 0x31, 0x36, 0x2d, 0x30, 0x36, 0x2d, 0x31, 0x36, 0x54, 0x30, 0x37, 0x3a, 0x34, 0x37, 0x3a, 0x32, 0x31, 0x5a, 0xd, 0xa, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x3a, 0x50, 0x54, 0x3d, 0x38, 0x20, 0x50, 0x44, 0x3d, 0x50, 0x43, 0x4d, 0x41, 0x20, 0x53, 0x52, 0x3d, 0x38, 0x30, 0x30, 0x30, 0x20, 0x50, 0x50, 0x53, 0x3d, 0x35, 0x30, 0x20, 0x53, 0x53, 0x55, 0x50, 0x3d, 0x6f, 0x66, 0x66, 0xd, 0xa, 0x78, 0x2d, 0x53, 0x49, 0x50, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x3a, 0x53, 0x56, 0x41, 0x3d, 0x52, 0x47, 0x20, 0x53, 0x52, 0x44, 0x3d, 0x33, 0x39, 0x32, 0x20, 0x53, 0x46, 0x43, 0x3d, 0x30, 0xd, 0xa, 0x78, 0x2d, 0x53, 0x49, 0x50, 0x74, 0x65, 0x72, 0x6d, 0x3a, 0x53, 0x44, 0x43, 0x3d, 0x4f, 0x4b, 0x20, 0x53, 0x44, 0x54, 0x3d, 0x37, 0x20, 0x53, 0x44, 0x52, 0x3d, 0x4f, 0x52, 0xd, 0xa, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x3a, 0x4a, 0x42, 0x41, 0x3d, 0x33, 0x20, 0x4a, 0x42, 0x52, 0x3d, 0x32, 0x20, 0x4a, 0x42, 0x4e, 0x3d, 0x32, 0x30, 0x20, 0x4a, 0x42, 0x4d, 0x3d, 0x32, 0x30, 0x20, 0x4a, 0x42, 0x58, 0x3d, 0x32, 0x34, 0x30, 0xd, 0xa, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x3a, 0x4e, 0x4c, 0x52, 0x3d, 0x30, 0x2e, 0x30, 0x20, 0x4a, 0x44, 0x52, 0x3d, 0x30, 0x2e, 0x30, 0xd, 0xa, 0x42, 0x75, 0x72, 0x73, 0x74, 0x47, 0x61, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x3a, 0x42, 0x4c, 0x44, 0x3d, 0x30, 0x2e, 0x30, 0x20, 0x42, 0x44, 0x3d, 0x30, 0x20, 0x47, 0x4c, 0x44, 0x3d, 0x30, 0x2e, 0x30, 0x20, 0x47, 0x44, 0x3d, 0x35, 0x39, 0x33, 0x30, 0x20, 0x47, 0x4d, 0x49, 0x4e, 0x3d, 0x31, 0x36, 0xd, 0xa, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x3a, 0x52, 0x54, 0x44, 0x3d, 0x30, 0x20, 0x45, 0x53, 0x44, 0x3d, 0x30, 0x20, 0x49, 0x41, 0x4a, 0x3d, 0x30, 0xd, 0xa, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x73, 0x74, 0x3a, 0x4d, 0x4f, 0x53, 0x4c, 0x51, 0x3d, 0x34, 0x2e, 0x31, 0x20, 0x4d, 0x4f, 0x53, 0x43, 0x51, 0x3d, 0x34, 0x2e, 0x31, 0xd, 0xa}
var hepAddr = "localhost:9060"

func TestMain(t *testing.T) {
	UDPAddr, err := net.ResolveUDPAddr("udp", ":9064")
	if err != nil {
		log.Fatalln(err)
	}
	connXR, err := net.ListenUDP("udp", UDPAddr)
	if err != nil {
		log.Fatalln(err)
	}

	connHEP, err := net.Dial("udp", hepAddr)
	if err != nil {
		log.Fatalln(err)
	}

	connXROut, err := net.Dial("udp", "127.0.0.1:9064")
	if err != nil {
		log.Fatalln(err)
	}

	for i := 0; i < 10; i++ {
		_, err := connXROut.Write(publish)
		if err != nil {
			log.Fatalln(err)
		}
	}

	outXRCh := make(chan XRPacket, 1)
	outHEPCh := make(chan []byte, 1)
	inXRCh := make(chan XRPacket, 1)

	go sendXR(connXR, outXRCh)
	go recvXR(connXR, inXRCh, outHEPCh)
	go sendHEP(connHEP, outHEPCh)

	for packet := range inXRCh {
		outXRCh <- packet
	}
}
